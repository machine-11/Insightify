# from crewai_tools import ScrapeWebsiteTool, FileWriterTool, TXTSearchTool, FileReadTool
from crewai import Agent, Task, Crew, Process
import json
# import os
# import random
from langchain_openai import ChatOpenAI
from logics.prepare_elig import load_query_tool
from langchain_core.callbacks import BaseCallbackHandler
from typing import Any, Dict



class CustomHandler(BaseCallbackHandler):
    """A custom handler for logging interactions within the process chain."""
    
    def __init__(self, agent_name: str) -> None:
        super().__init__()
        self.agent_name = agent_name

    def on_chain_start(self, serialized: Dict[str, Any], outputs: Dict[str, Any], **kwargs: Any) -> None:
        """Log the start of a chain with user input."""
        # st.session_state.messages.append({"role": "assistant", "content": outputs['input']})
        # st.chat_message("assistant").write(outputs['input'])
        
    def on_agent_action(self, serialized: Dict[str, Any], inputs: Dict[str, Any], **kwargs: Any) -> None:
        """""Log the action taken by an agent during a chain run."""
        # st.session_state.messages.append({"role": "assistant", "content": inputs['input']})
        # st.chat_message("assistant").write(inputs['input'])
        
    def on_chain_end(self, outputs: Dict[str, Any], **kwargs: Any) -> None:
        """Log the end of a chain with the output generated by an agent."""
        # st.session_state.messages.append({"role": self.agent_name, "content": outputs['output']})
        # st.chat_message(self.agent_name).write(outputs['output'])



#crew prep
def gen_crew():


    #tool from elig index
    tool = load_query_tool()

    #agents
    agent_planner= Agent(
        role="HDB Consultant",
        goal="Create engaging and accurate content based on the knowledge base, focusing on '{topic}' and providing guidance for future planning.",
        backstory="You’re addressing a query related to '{topic}'. Using your extensive experience and knowledge base, ensure the customer’s inquiry is fully understood. Refine and expand on the query as needed to cover additional common questions. Your insights provide a foundation for data analysts and business writers to deliver valuable information, ultimately helping customers make informed decisions.",
        allow_delegation=False,
        verbose=True,
        llm = ChatOpenAI ( model="gpt-4o-mini", temperature= 0.5 ) 
    )


    agent_writer = Agent(
        role="HDB Writer",
        goal="Compose an elegant, polished, and insightful professional report on the topic: '{topic}'",
        backstory="You are crafting a comprehensive and eloquent response to the user query: '{topic}'. Your approach is guided by the outline and context provided by the HDB Consultant, along with analysis from the HDB Analyst related to '{topic}'. By adhering to the main objectives and direction set forth by the HDB Consultant, you will deliver objective and impartial insights supported by their information. Ensure that your document is professionally designed for presentation and remains easily understandable for citizens.",
        allow_delegation=False,
        verbose=True,
        llm= ChatOpenAI ( model="gpt-4o-mini", temperature= 0.7 ) 
    )


    agent_analyst = Agent(
        role="HDB Analyst",
        goal="Perform Comprehensive Analysis on the topic: '{topic}' ",
        backstory="You are leveraging your strong analytical skills to deliver a comprehensive analysis on the topic: '{topic}'. Guided by the outline and context provided by the HDB Consultant, you’ll align with the main objectives and direction while generating detailed insights. This analysis, supported by the HDB Consultant’s information, will be shared with the HDB Writer.",

        allow_delegation=False,
        verbose=True,
        llm = ChatOpenAI ( model="gpt-4o-mini", temperature= 0.2 ) 
    )

    #tasks
    task_plan = Task(
        description=(
        """1. Generate 6 to 10 facts closely related to the topic, '{topic}', using our knowledge base..
        2. Use insights on relevant HDB policies to anticipate additional questions users may have, particularly around eligibility for higher-quality flats, housing loans with more favorable rates, and the total amount of subsidies or grants available from the government.
        3. Focus on the most urgent questions based on the customer's initial inquiry, then suggest other relevant topics once these primary concerns are addressed.
        """
        ),
        expected_output="A comprehensive strategy to address user queries on flat and housing loan eligibility, offering guidance on planning while considering factors such as age, citizenship, family composition, income level, and ownership history.",
        agent= agent_planner,
        tools = [tool]

    )





    task_analyse = Task(
        description=(
          """1. Use the HDB Consultant's plan to conduct a thorough analysis on '{topic}' . 
             2. Pay close attention to eligibility factors such as age, gender, marital status, income, race, and ethnicity.
             3. Provide users with clear explanations of your analysis, including alternative options and additional choices, even if certain conditions apply.
             4. Your findings will be presented in a document designed by the HDB Writer.
             5. Collaborate with your team of consultants and writers to ensure the analysis aligns with the most valuable insights on on '{topic}'.
"""
    ),
        expected_output="""A clear and comprehensive analysis that delivers valuable data and insights regarding eligibility for flats and housing loans to the Business Writer.""",

        agent=agent_analyst,
        context= [task_plan],
        tools = [tool]
    )

    task_write = Task(
        description=(
            """
                1. Leverage the HDB consultant's plan and the analyst's insights to create a stylish and compelling document on '{topic}'.
                2. Ensure that sections and subtitles are engagingly titled, and infuse the content with empathy and positivity to inspire hope and encourage readers.
                3. Proofread for grammatical errors and ensure alignment with HDB's Vision, Mission, and Values.
                4. The content should be substantial, with a minimum of 1,200 words, and should not include any images."""
                                ),
        expected_output="A comprehensive, well-written document providing insights on '{topic}' in **Markdown format**.",
        agent=agent_writer,
        context= [task_plan, task_analyse],
        tools = [tool]
    )


    crew = Crew(
        agents=[agent_planner, agent_analyst, agent_writer],
        tasks=[task_plan, task_analyse, task_write ], 
        verbose= True,
		# process=Process.hierarchical, # In case you want to use that instead https://docs.crewai.com/how-to/Hierarchical/
        # manager_llm= ChatOpenAI( temperature=0) ,
        # manager_callbacks=[CustomHandler("Crew Manager")]
    )
    
    return crew

def run_crew(crew):


    crew.kickoff()

    task_output =   crew.tasks[0].output
    print(f"Task Description: {task_output.description}")
    print(f"Task Summary: {task_output.summary}")
    print(f"Raw Output: {task_output.raw}")

    if task_output.json_dict:
        print(f"JSON Output: {json.dumps(task_output.json_dict, indent=2)}")
    if task_output.pydantic:
        print(f"Pydantic Output: {task_output.pydantic}")

    # try:
    #     o = json.loads(task_output.raw ) 
    # except:
    #     o = run_crew(crew)
    # return o


  

if __name__ == "__main__":
    # print(random_file() )
    # gen_quiz()
    print( gen_crew().kickoff({"topic": "I am 38 years old single singaporean. What flat and houseing loan I am eligible for? "}) )

# i am 38 years old, single, singaporean. I plan to get a hdb flat, what is the maximum amount of subsidry and grant I can possibly get from goverment?

###


